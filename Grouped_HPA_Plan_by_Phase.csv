Phase,Tasks,Owners,Notes
Configuration,"Add CPU & memory requests/limits to containers in Deployments, Use conservative resource values as starting point, Ensure updates are rolled out without pod disruption",DevOps,"Mandatory for HPA to work with CPU/Memory | Example: 200m CPU, 256Mi memory as requests | Use `kubectl rollout status` to monitor updates"
HPA Deployment,"Create HPA manifests using autoscaling/v2 API, Configure CPU and memory average utilization thresholds, Set minReplicas to 1 and maxReplicas to 2",DevOps,"HPA kind: HorizontalPodAutoscaler | Example: CPU 60%, Memory 70% | Prevent over-scaling and unnecessary costs"
Monitoring & Validation,"Run `kubectl get hpa` and `describe hpa` for status check, Watch scaling events via `kubectl get events`, Monitor `kubectl top pods` for live metrics, Use CloudWatch, Prometheus or Grafana for visual tracking",DevOps,Check current vs desired replicas | Capture messages like 'Scaled up/down replica set' | Validate usage under load scenarios | Cloud-native observability recommended
Optimization,"Analyze scale behavior post-deployment, Use tools like Goldilocks or VPA for tuning requests/limits, Tweak scale-in/out policies if needed, Expand HPA to other namespaces and workloads",DevOps,Ensure scaling doesn't cause instability | Review namespace-wide suggestions | Modify scale policies (e.g. stabilizationWindowSeconds) | Apply proven pattern across environments
Pre-requisite,"Ensure Metrics Server is installed and operational, Verify Cluster Autoscaler is enabled with correct ASG tags, Identify namespaces and workloads to apply HPA, Backup current Deployment YAMLs","DevOps, Infra, Platform",Run `kubectl top pods` to verify metrics availability | Ensure ASGs have k8s.io/cluster-autoscaler/enabled tag | Start with dev/intg/accp namespaces | Export YAMLs using `kubectl get deploy -o yaml`
